{"version":3,"file":"static/js/271.f05e805a.chunk.js","mappings":"4UACA,EAAuB,uBAAvB,EAAyD,2B,uCCiB5CA,GAAWC,EAAAA,EAAAA,OAAK,WACzB,IAAMC,GAAwBC,EAAAA,EAAAA,MAU9B,OARAC,EAAAA,EAAAA,YAAU,WAGN,OAFKF,GAASG,EAAAA,EAAAA,OAEP,WACEH,GAASI,EAAAA,EAAAA,MACjB,CACJ,GAAE,CAACJ,KAGA,iCACI,SAACK,EAAD,KACA,SAACC,EAAD,MAIX,IAEYD,GAAmBN,EAAAA,EAAAA,OAAK,WACjC,IAAMQ,GAAWC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,QAApC,IAEvBI,GAAoBC,EAAAA,EAAAA,QAAuB,MACjD,GAAoDC,EAAAA,EAAAA,WAAS,GAA7D,eAAOC,EAAP,KAA2BC,EAA3B,KAkCA,OARAb,EAAAA,EAAAA,YAAU,WACFY,GACAE,YAAW,WAAO,IAAD,EACb,UAAAL,EAAkBM,eAAlB,SAA2BC,eAAe,CAACC,SAAU,UACxD,GAAE,IAEV,GAAE,CAACL,EAAoBP,KAGpB,iBAAKa,UAAWC,EAAkBC,SAjCd,SAACC,GACrB,IAAMC,EAAUD,EAAEE,cAEdC,EAAsBF,EAAQG,aAAeH,EAAQI,UAK7CC,KAAKC,IAAIJ,EAAsBF,EAAQO,cAKvC,IACHjB,GACDC,GAAsB,GAGtBD,GACAC,GAAsB,EAGjC,EAWG,UACKR,EAASyB,KAAI,SAACC,GAAD,OAAO,SAACC,EAAD,CAAwBC,QAASF,GAAfA,EAAEG,GAA3B,KACd,gBAAKC,IAAK1B,MAGrB,IAEYuB,GAAiDnC,EAAAA,EAAAA,OAAK,YAAkB,IAAfoC,EAAc,EAAdA,QAClE,OACI,4BACI,gBAAKG,MAAO,GAAIC,IAAKJ,EAAQK,MAAOC,IAAI,YACxC,uBAAIN,EAAQO,YACZ,kBACCP,EAAQA,SACT,oBAGX,IAEY7B,GAAqBP,EAAAA,EAAAA,OAAK,WAKnC,IAAM4C,GAAqBnC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKiC,MAApC,IACjC3C,GAAwBC,EAAAA,EAAAA,MAWxB2C,EAAmBC,EAAAA,GAAW,CAChCtC,SAAUsC,EAAAA,KAAaC,SAAS,+BAKpC,MAFW,UAAXH,GAAsBI,MAAM,kDAGxB,SAAC,KAAD,CAAQC,cAhB6B,CACrCzC,SAAU,IAgBF0C,SAbK,SAACC,EAAD,GAA0E,IAAlDC,EAAiD,EAAjDA,UAChCnD,GAASoD,EAAAA,EAAAA,IAAYF,EAAO3C,WACjC4C,GACH,EAWWP,iBAAkBA,EAF1B,UAGI,UAAC,KAAD,CAAMxB,UAAWC,EAAjB,WACI,SAAC,KAAD,CAAOgC,KAAM,WACNC,SAAW,SAACC,GAAD,OACP,SAACC,EAAA,GAAD,QAAUC,YAAa,wBAA4BF,GAD5C,KAGlB,mBAAQnC,UAAW,WACXsC,KAAM,SACNC,SAAqB,UAAXhB,EAFlB,wBAMf,IAED,EA9HqB,WACjB,OACI,+BACI,SAAC7C,EAAD,KAGX,C","sources":["webpack://project8/./src/pages/Chat/ChatPage.module.css?29d9","pages/Chat/ChatPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ChatPage_form__jDXX6\",\"messages\":\"ChatPage_messages__8A269\"};","import React, {UIEvent, FC, useEffect, useRef, useState, memo} from 'react';\r\nimport {Field, FieldProps, Form, Formik, FormikHelpers, FormikValues, useFormik} from \"formik\";\r\nimport Textarea from \"../../formik/Textarea/Textarea\";\r\nimport classes from \"./ChatPage.module.css\"\r\nimport {ChatMessageAPIType, StatusType} from \"../../api/chat-api\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppDispatch, AppStateType} from \"../../redux/store\";\r\nimport {sendMessage, startMessagesListening, stopMessagesListening} from \"../../redux/reducers/chatReducer\";\r\nimport * as Yup from \"yup\";\r\n\r\nconst ChatPage: FC = () => {\r\n    return (\r\n        <>\r\n            <Chat />\r\n        </>\r\n    )\r\n}\r\n\r\nexport const Chat: FC = memo(() => {\r\n    const dispatch: AppDispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        void dispatch(startMessagesListening())\r\n\r\n        return () => {\r\n            void dispatch(stopMessagesListening())\r\n        }\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <>\r\n            <ChatMessages />\r\n            <AddMessageForm />\r\n        </>\r\n\r\n    )\r\n})\r\n\r\nexport const ChatMessages: FC = memo(() => {\r\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const [isAutoScrollActive, setIsAutoScrollActive] = useState(true)\r\n\r\n    const onScrollHandler = (e: UIEvent<HTMLDivElement>) => {\r\n        const element = e.currentTarget\r\n\r\n        let differenceWhatWeSee = element.scrollHeight - element.scrollTop\r\n        // element.scrollHeight - высота всей таблицы пикселей - 3800 например.\r\n        // element.scrollTop - сколько сейчас в верхней точке длинна пикселей - 3400 например\r\n            // прокрутка вверх то тут уже 3300 и разница уже 500 пикселей.\r\n\r\n        let value = Math.abs(differenceWhatWeSee - element.clientHeight)\r\n        // let value = differenceWhatWeSee - element.clientHeight\r\n        // element.clientHeight - всегда как у див тоесть = 400\r\n        // 500 - 400 = 100\r\n\r\n        if (value < 300) {\r\n            if (!isAutoScrollActive) {\r\n                setIsAutoScrollActive(true)\r\n            }\r\n        } else {\r\n            if (isAutoScrollActive) {\r\n                setIsAutoScrollActive(false)\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScrollActive) {\r\n            setTimeout(() => {\r\n                messagesAnchorRef.current?.scrollIntoView({behavior: \"smooth\"})\r\n            }, 500)\r\n        }\r\n    }, [isAutoScrollActive, messages])\r\n\r\n    return (\r\n        <div className={classes.messages} onScroll={onScrollHandler}>\r\n            {messages.map((m) => <ChatMessage key={m.id} message={m}/>)}\r\n            <div ref={messagesAnchorRef}/>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport const ChatMessage: FC<{message: ChatMessageAPIType}> = memo(({ message }) => {\r\n    return (\r\n        <div>\r\n            <img width={60} src={message.photo} alt=\"Avatar\"/>\r\n            <b>{message.userName}</b>\r\n            <br/>\r\n            {message.message}\r\n            <hr/>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport const AddMessageForm: FC = memo(() => {\r\n    type InitialValuesType = {\r\n        messages: string\r\n    }\r\n\r\n    const status: StatusType = useSelector((state: AppStateType) => state.chat.status)\r\n    const dispatch: AppDispatch = useDispatch()\r\n\r\n    const initialValues: InitialValuesType = {\r\n        messages: \"\"\r\n    }\r\n\r\n    const onSubmit = (values: FormikValues, {resetForm}: FormikHelpers<InitialValuesType>) => {\r\n        void dispatch(sendMessage(values.messages))\r\n        resetForm()\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        messages: Yup.string().required(\"This is a required field!\"),\r\n    })\r\n\r\n    status === \"error\" && alert(\"Some error occurred. Please refresh the page!\")\r\n\r\n    return (\r\n        <Formik initialValues={initialValues}\r\n                onSubmit={onSubmit}\r\n                validationSchema={validationSchema}>\r\n            <Form className={classes.form}>\r\n                <Field name={\"messages\"}\r\n                       children={ (props: FieldProps) =>\r\n                           <Textarea placeholder={\"Enter the message...\"} {...props} /> }\r\n                />\r\n                <button className={\"send_btn\"}\r\n                        type={\"submit\"}\r\n                        disabled={status !== \"ready\"}>&#5169;</button>\r\n            </Form>\r\n        </Formik>\r\n    )\r\n})\r\n\r\nexport default ChatPage;"],"names":["Chat","memo","dispatch","useDispatch","useEffect","startMessagesListening","stopMessagesListening","ChatMessages","AddMessageForm","messages","useSelector","state","chat","messagesAnchorRef","useRef","useState","isAutoScrollActive","setIsAutoScrollActive","setTimeout","current","scrollIntoView","behavior","className","classes","onScroll","e","element","currentTarget","differenceWhatWeSee","scrollHeight","scrollTop","Math","abs","clientHeight","map","m","ChatMessage","message","id","ref","width","src","photo","alt","userName","status","validationSchema","Yup","required","alert","initialValues","onSubmit","values","resetForm","sendMessage","name","children","props","Textarea","placeholder","type","disabled"],"sourceRoot":""}